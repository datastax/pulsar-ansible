---
#########################
# Create broker security related folders for client connection on Pular AdminConsole hosts
# ------------------------
- name: If broker authN is enabled, create JWT token related security folders on Pulsar AdminConsole hosts
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ pulsar_user }}"
    group: "{{ pulsar_user_group }}"
    mode: "{{ file_permission_mode }}"
  with_items:
    - "{{ tgt_adminConsole_sec_dir }}/jwt/token"
  when: enable_brkr_authNZ is defined and enable_brkr_authNZ|bool

- name: If broker TLS is enabled, create TLS certificate related security folders on Pulsar AdminConsole hosts
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ pulsar_user }}"
    group: "{{ pulsar_user_group }}"
    mode: "{{ file_permission_mode }}"
  with_items:
    - "{{ tgt_adminConsole_sec_dir }}/tls/rootca"
    - "{{ tgt_adminConsole_sec_dir }}/tls/server"
  when: enable_brkr_tls is defined and enable_brkr_tls|bool


#########################
# Copy locally generated security files to Pulsar client hosts
# ------------------------
- name: If broker authN is enabled, copy JWT token file to Pulsar AdminConsole host
  copy:
    src: "{{ item.src_file }}/"
    dest: "{{ item.dest_file }}"
    owner: "{{ pulsar_user }}"
    group: "{{ pulsar_user_group }}"
    force: "{{ force_existing_adminConsole_jwt_token }}"
  with_items:
    - { src_file: "{{ local_jwt_src_homedir }}/token/{{ cluster_name }}/brokers/{{ brkr_super_user_roles[0] }}.jwt", 
        dest_file: "{{ tgt_adminConsole_sec_dir }}/jwt/token/{{ brkr_super_user_roles[0] }}.jwt" }
  when: enable_brkr_authNZ is defined and enable_brkr_authNZ|bool

- name: If TLS is enabled, copy the trusted TLS certificate to Pulsar AdminConsole host
  copy:
    src: "{{ item.src_file }}/"
    dest: "{{ item.dest_file }}"
    owner: "{{ pulsar_user }}"
    group: "{{ pulsar_user_group }}"
    force: "{{ force_existing_adminConsole_tls_certs }}"
  with_items:
    - { src_file: "{{ local_tls_src_homedir }}/certs/{{ cluster_name }}/{{ srv_component }}s/adminConsole.{{ (hostvars[groups['adminConsole'][0]]['private_ip'])|trim|replace('.','-') }}.key-pk8.pem",
        dest_file: "{{ tgt_adminConsole_sec_dir }}/tls/server/adminConsole.{{ (hostvars[groups['adminConsole'][0]]['private_ip'])|trim|replace('.','-') }}.key-pk8.pem" }
    - { src_file: "{{ local_tls_src_homedir }}/certs/{{ cluster_name }}/{{ srv_component }}s/adminConsole.{{ (hostvars[groups['adminConsole'][0]]['private_ip'])|trim|replace('.','-') }}.crt.pem",
        dest_file: "{{ tgt_adminConsole_sec_dir }}/tls/server/adminConsole.{{ (hostvars[groups['adminConsole'][0]]['private_ip'])|trim|replace('.','-') }}.crt.pem" }
    - { src_file: "{{ local_tls_src_homedir }}/certs/broker_{{ public_cacert_name }}",
        dest_file: "{{ tgt_adminConsole_sec_dir }}/tls/rootca/broker_{{ public_cacert_name }}" }
    - { src_file: "{{ local_tls_src_homedir }}/certs/{{ srv_component}}_{{ public_cacert_name }}",
        dest_file: "{{ tgt_adminConsole_sec_dir }}/tls/rootca/{{ public_cacert_name }}" }

  when: enable_brkr_tls is defined and enable_brkr_tls|bool


#########################
# Configure AdminConsole application server
# ------------------------
- name: Put the JWT token value in varaible
  slurp:
    src: "{{ tgt_adminConsole_sec_dir }}/jwt/token/{{ brkr_super_user_roles[0] }}.jwt"
  register: client_token
  when: enable_brkr_authNZ is defined and enable_brkr_authNZ|bool
# - debug: msg={{ client_token['content'] | b64decode | trim }}
#   when: show_debug_msg|bool and enable_brkr_authNZ is defined and enable_brkr_authNZ|bool

- name: Copy Pulsar AdminConsole dashboard config (local.json) template
  template:
    src: templates/ac_local.json.tmp
    dest: "{{ tgt_adminConsole_inst_dir }}/config/local.json"
    owner: "{{ pulsar_user }}"
    group: "{{ pulsar_user_group }}"
    mode: "{{ file_permission_mode_noexec }}"

- name: Replace Pulsar AdminConsole config setting placeholders with cluster specific information
  replace:
      path: "{{ tgt_adminConsole_inst_dir }}/config/local.json"
      regexp: "{{ item.regexp }}"
      replace: "{{ item.line }}"
  with_items:
    - { regexp: "{{ placeHolder_listenPort }}", line: "{{ ac_listen_port }}" }
    - { regexp: "{{ placeHolder_authMode }}", line: "{{ ac_auth_mode }}" }
    - { regexp: "{{ placeHolder_authUser }}", line: "{{ ac_auth_user }}" }
    - { regexp: "{{ placeHolder_authUserPass }}", line: "{{ ac_auth_user_pass }}" }
    - { regexp: "{{ placeHolder_homeCluster }}", line: "{{ cluster_name }}" }
    - { regexp: "{{ placeHolder_tenant }}", line: "{{ ac_tenant }}" }
    - { regexp: "{{ placeHolder_clientId }}", line: "{{ ac_client_id }}" }
    - { regexp: "{{ placeHolder_logLevel }}", line: "{{ ac_log_level }}" }
    - { regexp: "{{ placeHolder_tokenSecret }}", line: "{{ ac_token_secret }}" }
    - { regexp: "{{ placeHolder_sslVerifyCerts }}", line: "{% if enable_anco_https is defined and enable_anco_https|bool %}false{% else %}true{% endif %}" }
    - { regexp: "{{ placeHolder_sslHostnameValidation }}", line: "{% if enable_anco_https is defined and enable_anco_https|bool %}false{% else %}true{% endif %}" }
    - { regexp: "{{ placeHolder_sslCaPath }}", line: "{% if enable_anco_https is defined and enable_anco_https|bool %}{{ tgt_adminConsole_sec_dir }}/tls/rootca/{{ public_cacert_name }}{% else %}{% endif %}" }
    - { regexp: "{{ placeHolder_sslCertPath }}", line: "{% if enable_anco_https is defined and enable_anco_https|bool %}{{ tgt_adminConsole_sec_dir }}/tls/server/adminConsole.{{ (hostvars[groups['adminConsole'][0]]['private_ip'])|trim|replace('.','-') }}.crt.pem{% else %}{% endif %}" }
    - { regexp: "{{ placeHolder_sslKeyPath }}", line: "{% if enable_anco_https is defined and enable_anco_https|bool %}{{ tgt_adminConsole_sec_dir }}/tls/server/adminConsole.{{ hostvars[groups['adminConsole'][0]]['private_ip']|trim|replace('.','-') }}.key-pk8.pem{% else %}{% endif %}" }
    - { regexp: "{{ placeHolder_k8sNs }}", line: "{{ ac_k8s_ns }}" }
    - { regexp: "{{ placeHolder_k8sHost }}", line: "{{ ac_k8s_host }}" }
    - { regexp: "{{ placeHolder_k8sSvcPort }}", line: "{{ ac_k8s_svc_port }}" }
    - { regexp: "{{ placeHolder_noticeText }}", line: "{{ ac_notice_text }}" }
    - { regexp: "{{ placeHolder_functionDisabled }}", line: "{{ ac_function_disabled }}" }
    - { regexp: "{{ placeHolder_renderMonitoringTab }}", line: "{{ ac_render_monitoring_tab }}" }
    - { regexp: "{{ placeHolder_grafanaUrl }}", line: "{{ ac_grafana_url }}" }
    - { regexp: "{{ placeHolder_clientDisabled }}", line: "{{ ac_client_disabled }}" }
    - { regexp: "{{ placeHolder_brokerHttpUrl }}", line: "{% if ac_ho_broker_http_url is defined and ac_ho_broker_http_url|length > 0 %}{{ ac_ho_broker_http_url }}{% else %}http://{{ hostvars[groups['broker'][0]]['webSvcListStr']|trim }}{% endif %}" }
    - { regexp: "{{ placeHolder_apiVersion }}", line: "{{ pulsarLS_ver_main }}" }
    - { regexp: "{{ placeHolder_brokerSvcUrl }}", line: "{% if enable_brkr_tls is defined and enable_brkr_tls|bool %}https://{{ hostvars[groups['broker'][0]]['webSvcTlsListStr']|trim }}{% else %}http://{{ hostvars[groups['broker'][0]]['webSvcListStr']|trim }}{% endif %}" }
    - { regexp: "{{ placeHolder_webSvcUrl }}", line: "{% if enable_brkr_tls is defined and enable_brkr_tls|bool %}https://{{ hostvars[groups['broker'][0]]['webSvcTlsListStr']|trim }}{% else %}http://{{ hostvars[groups['broker'][0]]['webSvcListStr']|trim }}{% endif %}" }
    - { regexp: "{{ placeHolder_clientToken }}", line: "{% if enable_brkr_authNZ is defined and enable_brkr_authNZ|bool %}{{ client_token['content']|b64decode|trim }}{% else %}{% endif %}" }
    - { regexp: "{{ placeHolder_tokenPath }}", line: "{% if enable_brkr_authNZ is defined and enable_brkr_authNZ|bool %}{{ tgt_adminConsole_sec_dir }}/jwt/token/{{ brkr_super_user_roles[0] }}.jwt{% else %}{% endif %}" }
    - { regexp: "{{ placeHolder_caCertificate }}", line: "{% if enable_brkr_tls is defined and enable_brkr_tls|bool %}{{ tgt_adminConsole_sec_dir }}/tls/rootca/{{ public_cacert_name }}{% else %}{% endif %}" }
    - { regexp: "{{ placeHolder_hoBrokerSvcUrl }}", line: "{% if ac_ho_broker_svc_url is defined and ac_ho_broker_svc_url|length > 0 %}{{ ac_ho_broker_svc_url }}{% else %}{% if enable_brkr_tls is defined and enable_brkr_tls|bool %}pulsar+ssl://{{ hostvars[groups['broker'][0]]['brokerSvcTlsListStr']|trim }}{% else %}pulsar://{{ hostvars[groups['broker'][0]]['brokerSvcListStr']|trim }}{% endif %}{% endif %}" }
    - { regexp: "{{ placeHolder_hoWebSvcUrl }}", line: "{% if ac_ho_web_svc_url is defined and ac_ho_web_svc_url|length > 0 %}{{ ac_ho_web_svc_url }}{% else %}{% if enable_brkr_tls is defined and enable_brkr_tls|bool %}https://{{ hostvars[groups['broker'][0]]['webSvcTlsListStr']|trim }}{% else %}http://{{ hostvars[groups['broker'][0]]['webSvcListStr']|trim }}{% endif %}{% endif %}" }